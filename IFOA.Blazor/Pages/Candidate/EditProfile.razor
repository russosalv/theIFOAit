@attribute [Route(EditProfile.PageUrl)]
@attribute [Route(EditProfile.PageUrl2 + "/{Id:guid?}")]
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using IFOA.DB.Entities
@using IFOA.Shared
@using IFOA.Shared.Dtos
@using ISOLib.Model
@using Country = Netizine.Enums.Country
@inherits IFOA.Blazor.Common.DbPage

<style>
    @@media (max-width: 600px) {
        .mobile-button  {
            width:100%;
            color: white;
        }
    }
    
    @@media (min-width: 600px) {
        .mobile-button  {
            margin-top: 16px;
        }
    }
    
    /*.fix-overflow-y >  div:nth-child(2){*/
    /*    overflow-y: clip !important;*/
    /*}*/
</style>

<MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Create your profile</MudText>

<MudForm @ref="form">
<MudExpansionPanels MultiExpansion="true">
<MudExpansionPanel IsInitiallyExpanded="true">
    <TitleContent>
        <div class="d-flex">
            <MudIcon Icon="@Icons.Material.Filled.Person" class="mr-3"></MudIcon>
            <MudText>
                <strong>Personal Info</strong>
            </MudText>
        </div>
    </TitleContent>
    <ChildContent>
        <MudGrid>
            <MudItem sm="1" xs="12">
                <MudSelect T="GenderEnum" Label="Gender" AnchorOrigin="Origin.BottomCenter" @bind-Value="@CandidateDto.Gender">
                    <MudSelectItem Value="@(GenderEnum.Male)">
                        Mr
                    </MudSelectItem>
                    <MudSelectItem Value="@(GenderEnum.Female)">
                        Mrs
                    </MudSelectItem>
                    <MudSelectItem Value="@(GenderEnum.NotSpecified)">
                        Other
                    </MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem sm="5" xs="12">
                <MudTextField T="string" Label="First Name" Required="true" RequiredError="First Name is required!"
                              @bind-Value="@CandidateDto.Name"/>
            </MudItem>
            <MudItem sm="6" xs="12">
                <MudTextField T="string" Label="Last Name" Required="true" RequiredError="Last Name is required!"
                              @bind-Value="@CandidateDto.Surname"/>
            </MudItem>
            <MudItem sm="6" xs="12">
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })"
                              @bind-Value="@CandidateDto.Email"/>
            </MudItem>
            <MudItem sm="4" xs="12">
                <MudTextField T="string" Label="Mobile number"
                              Validation="@(new Func<string, IEnumerable<string>>(MobileValidation))"
                              Required="true"
                              RequiredError="Mobile number is required!"
                              @bind-Value="@CandidateDto.PhoneNumber"/>
            </MudItem>
            <MudItem sm="2" xs="12">
                <MudDatePicker Label="Date of Birth" DisableToolbar="true"
                               @bind-Date="@CandidateDto.BirthDate"
                               Required="true"
                               RequiredError="Date of Birth is required!"/>
            </MudItem>
        </MudGrid>
    </ChildContent>
</MudExpansionPanel>

<MudExpansionPanel IsInitiallyExpanded="true">
    <TitleContent>
        <div class="d-flex">
            <MudIcon Icon="@Icons.Material.Filled.LocationCity" class="mr-3"></MudIcon>
            <MudText>
                <strong>Location Info</strong>
            </MudText>
        </div>
    </TitleContent>
    <ChildContent>
        <MudGrid>
            <MudItem sm="6" xs="12">
                <MudSelectExtended MultiSelection="false"
                                   ItemCollection="_countries"
                                   SearchBox="true"
                                   SearchBoxAutoFocus="true"
                                   T="Country?"
                                   Label="Nationality"
                                   AnchorOrigin="Origin.BottomCenter"
                                   HelperText="Country of your citizenship"
                                   SearchBoxClearable="true"
                                   @bind-Value="@CandidateDto.Nationality"/>
            </MudItem>
            <MudItem sm="6" xs="12">
                <MudSelectExtended MultiSelection="false"
                                   ItemCollection="_countries"
                                   SearchBox="true"
                                   SearchBoxAutoFocus="true"
                                   T="Country?"
                                   Label="Residence Country"
                                   AnchorOrigin="Origin.BottomCenter"
                                   HelperText="Nation where you live"
                                   SearchBoxClearable="true"
                                   @bind-Value="@CandidateDto.ResidenceCountry"/>
            </MudItem>
            <MudItem sm="6" xs="12">
                <MudTextField T="string" Label="Address"
                              @bind-Value="@CandidateDto.Address"/>
            </MudItem>
            <MudItem sm="4" xs="12">
                <MudTextField T="string" Label="City"
                              @bind-Value="@CandidateDto.City"/>
            </MudItem>
            <MudItem sm="2" xs="12">
                <MudTextField T="string" Label="Zip Code"
                              @bind-Value="@CandidateDto.ZipCode"/>
            </MudItem>
        </MudGrid>
    </ChildContent>
</MudExpansionPanel>

<!-- Languages -->
<MudExpansionPanel IsInitiallyExpanded="true">
    <TitleContent>
        <div class="d-flex">
            <MudIcon Icon="@Icons.Material.Filled.Flag" class="mr-3"></MudIcon>
            <MudText>
                <strong>Languages</strong>
            </MudText>
        </div>
    </TitleContent>
    <ChildContent>
        <MudGrid>
            <MudItem sm="10" xs="12">
                <MudSelectExtended MultiSelection="true"
                                   ItemCollection="_languages"
                                   SearchBox="true"
                                   SearchBoxAutoFocus="true"
                                   Label="Kown Languages"
                                   AnchorOrigin="Origin.BottomCenter"
                                   SearchBoxClearable="true"
                                   @bind-SelectedValues="@_selectedLanguages"/>
            </MudItem>

            <MudItem sm="2" xs="12">
                <MudButton Class="mobile-button" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddToSpokenLanguage">Add Selected</MudButton>
            </MudItem>
        </MudGrid>

        <MudItem xs="12">
            <MudDataGrid T="CandidateSpokenLanguageDto"
                         EditMode="DataGridEditMode.Form"
                         Items="@CandidateSpokenLanguages"
                         EditTrigger="DataGridEditTrigger.Manual"
                         ReadOnly="false"
                         Bordered="false" Dense="true"
                         Hideable="true"
                         MultiSelection="true"
                         Class="mt-5 fix-overflow-y"
                         FixedFooter="false"
                         ShowMenuIcon="false"
                         HorizontalScrollbar="false"
                         SelectedItemsChanged="@SelectedLanguagesItemsChanged">
                <ToolBarContent>

                    <MudButton
                        Variant="Variant.Outlined"
                        Color="Color.Tertiary"
                        StartIcon="@Icons.Material.Filled.Delete"
                        Size="Size.Small"
                        OnClick="DeleteCheckedSpokenLanguages"
                        Disabled="@(!CheckedCandidateSpokenLanguages.Any())">
                        Delete Selected
                    </MudButton>

                </ToolBarContent>
                <Columns>
                    <SelectColumn T="CandidateSpokenLanguage"/>
                    <PropertyColumn Property="x => x.LanguageName" Title="Language" IsEditable="false"/>
                    <PropertyColumn Property="x => x.ReadingCefrLevel" Title="Reading Level" IsEditable="true">
                        <EditTemplate>
                            <MudSelect Label="Reading Level" @bind-Value="context.Item.ReadingCefrLevel" Required RequiredError="You must select a Position!!!" Margin="@Margin.Dense">
                                @foreach (var item in EnumHelper.GetValues<CEFRLevelEnum>())
                                {
                                    <MudSelectItem Value="@item">@item</MudSelectItem>
                                }
                            </MudSelect>
                        </EditTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.WritingCefrLevel" Title="Writing Level" IsEditable="true">
                        <EditTemplate>
                            <MudSelect Label="Writing Level" @bind-Value="context.Item.WritingCefrLevel" Required RequiredError="You must select a Position!!!" Margin="@Margin.Dense">
                                @foreach (var item in EnumHelper.GetValues<CEFRLevelEnum>())
                                {
                                    <MudSelectItem Value="@item">@item</MudSelectItem>
                                }
                            </MudSelect>
                        </EditTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.SpeakingCefrLevel" Title="Speaking Level" IsEditable="true">
                        <EditTemplate>
                            <MudSelect Label="Speaking Level" @bind-Value="context.Item.SpeakingCefrLevel" Required RequiredError="You must select a Position!!!" Margin="@Margin.Dense">
                                @foreach (var item in EnumHelper.GetValues<CEFRLevelEnum>())
                                {
                                    <MudSelectItem Value="@item">@item</MudSelectItem>
                                }
                            </MudSelect>
                        </EditTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.ListeningCefrLevel" Title="Listening Level" IsEditable="true">
                        <EditTemplate>
                            <MudSelect Label="Listening Level" @bind-Value="context.Item.ListeningCefrLevel" Required RequiredError="You must select a Position!!!" Margin="@Margin.Dense">
                                @foreach (var item in EnumHelper.GetValues<CEFRLevelEnum>())
                                {
                                    <MudSelectItem Value="@item">@item</MudSelectItem>
                                }
                            </MudSelect>
                        </EditTemplate>
                    </PropertyColumn>
                    <TemplateColumn Title="Edit Levels" Sortable="false" Resizable="false">
                        <CellTemplate>
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync"/>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudItem>

    </ChildContent>
</MudExpansionPanel>

<!-- Job Functions -->
<MudExpansionPanel IsInitiallyExpanded="true">
    <TitleContent>
        <div class="d-flex">
            <MudIcon Icon="@Icons.Material.Filled.BusinessCenter" class="mr-3"></MudIcon>
            <MudText>
                <strong>Preferred Job functions</strong>
            </MudText>
        </div>
    </TitleContent>
    <ChildContent>
        <MudGrid>
            <MudItem sm="10" xs="12">
                <MudSelectExtended MultiSelection="true"
                                   ItemCollection="_jobFunctions"
                                   SearchBox="true"
                                   SearchBoxAutoFocus="true"
                                   Label="Choose Job Functions"
                                   AnchorOrigin="Origin.BottomCenter"
                                   SearchBoxClearable="true"
                                   @bind-SelectedValues="@_selectedJobFunctions"/>
            </MudItem>

            <MudItem sm="2" xs="12">
                <MudButton Class="mobile-button" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddToSpokenLanguage">Add Selected</MudButton>
            </MudItem>
        </MudGrid>

        <MudItem xs="12">
        </MudItem>
    </ChildContent>

</MudExpansionPanel>

<!-- Working Location -->
<MudExpansionPanel IsInitiallyExpanded="true">
    <TitleContent>
        <div class="d-flex">
            <MudIcon Icon="@Icons.Material.Filled.AddLocation" class="mr-3"></MudIcon>
            <MudText>
                <strong>Preferred Working Location</strong>
            </MudText>
        </div>
    </TitleContent>
    <ChildContent>
        <MudGrid>
            <MudItem sm="10" xs="12">
                <MudSelectExtended MultiSelection="true"
                                   ItemCollection="_countries"
                                   T="Country?"
                                   SearchBox="true"
                                   SearchBoxAutoFocus="true"
                                   Label="Your Preferred Working Location"
                                   AnchorOrigin="Origin.BottomCenter"
                                   SearchBoxClearable="true"
                                   @bind-SelectedValues="@_selectedCountry"/>
            </MudItem>

            <MudItem sm="2" xs="12">
                <MudButton Class="mobile-button" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddToPreferredLocation">Add Selected</MudButton>
            </MudItem>
        </MudGrid>

        <MudItem xs="12">
            <MudDataGrid T="CandidatePreferredLocation"
                         EditMode="DataGridEditMode.Form"
                         Items="@CandidatePreferredLocations"
                         ReadOnly="false"
                         Bordered="false"
                         Dense="true"
                         Class="mt-5 fix-overflow-y"
                         FixedFooter="false"
                         ShowMenuIcon="false"
                         HorizontalScrollbar="false">
                <ToolBarContent>

                    <MudButton
                        Variant="Variant.Outlined"
                        Color="Color.Tertiary"
                        StartIcon="@Icons.Material.Filled.Add"
                        Size="Size.Small"
                        OnClick="AddPreferredLocation">
                        Add New
                    </MudButton>

                    <MudButton
                        Variant="Variant.Outlined"
                        Color="Color.Tertiary"
                        StartIcon="@Icons.Material.Filled.Delete"
                        Size="Size.Small"
                        OnClick="DeleteCheckedPreferredLocation"
                        Disabled="@(!CheckedCandidatePreferredLocations.Any())">
                        Delete Selected
                    </MudButton>

                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.Country" Title="Country" IsEditable="true">
                        <EditTemplate>
                            <MudSelect @bind-Value="context.Item.Country" Required RequiredError="You must select a Position!!!" Margin="@Margin.Dense">
                                @foreach (var item in EnumHelper.GetValues<Country>())
                                {
                                    <MudSelectItem Value="@item">@item</MudSelectItem>
                                }
                            </MudSelect>
                        </EditTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.City" Title="City" IsEditable="true"/>
                    <TemplateColumn Title="test">
                        <CellTemplate>
                            <MudIconButton OnClick="@context.Actions.StartEditingItemAsync" Color="@Color.Default" Icon="@Icons.Material.Filled.Edit"/>
                            <MudIconButton OnClick="@(() => PrcdBtnClick(@context.Item))" Color="@Color.Default" Icon="@Icons.Material.Filled.Delete"/>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudItem>
    </ChildContent>
</MudExpansionPanel>

<!-- About You -->
<MudExpansionPanel IsInitiallyExpanded="true">
    <TitleContent>
        <div class="d-flex">
            <MudIcon Icon="@Icons.Material.Filled.WorkHistory" class="mr-3"></MudIcon>
            <MudText>
                <strong>About You</strong>
            </MudText>
        </div>
    </TitleContent>
    <ChildContent>
        <MudItem sm="12">
            <MudTextField T="string"
                          Label="Biography" Lines="2"
                          Placeholder="Write here a summary of your career (max 2000 characters)"
                          Variant="Variant.Outlined" AdornmentIcon="@Icons.Material.Filled.Api"
                          @bind-Value="@CandidateDto.Biography"/>
        </MudItem>
        <MudItem sm="12" Class="mt-6">
            <MudText Typo="Typo.subtitle1" Class="mb-2">
                <strong>Cover Letter</strong>
            </MudText>
            <Editor
                ApiKey="4riwbr0v74s2z20eq0oyvwylb7gh6994zfgkv31okjqg931g"
                @bind-Value="@CandidateDto.CoverLetter"
                Conf="@editorConf"/>
        </MudItem>
    </ChildContent>
</MudExpansionPanel>

</MudExpansionPanels>

<MudSpeedDial Origin="Origin.BottomRight"
              Style="position:fixed; z-index: 100"
              Padding="10"
              OpenOnHover="true"
              Icon="@Icons.Material.Filled.Save"
              Color="Color.Primary"
              OnMainButtonClick="SaveData">
    <MudTooltip Text="Clear">
        <MudFab Size="Size.Small" IconSize="Size.Small" Icon="@Icons.Material.Outlined.Cancel" Color="Color.Tertiary"/>
    </MudTooltip>
</MudSpeedDial>
</MudForm>


@code {

        public const string PageUrl = "/candidate-profile/create";
        public const string PageUrl2 = "/candidate-profile/edit";
    MudForm form;
    private HashSet<CandidateSpokenLanguageDto> CheckedCandidateSpokenLanguages = new();
    private HashSet<CandidatePreferredLocation> CheckedCandidatePreferredLocations = new();


    private Dictionary<string, object> editorConf = new Dictionary<string, object>
    {
        { "paste_block_drop", true } //Disable paste images
    };

    private IEnumerable<string> MobileValidation(string pn)
    {
        if (string.IsNullOrWhiteSpace(pn))
        {
            yield return "Mobile number is required!";
            yield break;
        }
        if (pn.StartsWith("+") == false && pn.StartsWith("00") == false)
        {
            yield return "Mobile number must start with + or 00";
        }
        if (pn.Length < 5)
        {
            yield return "Mobile number is too short";
        }
        if (Regex.IsMatch(pn, @"[A-Za-z]"))
            yield return "Mobile number must contain only numbers";
    }

    private async Task<IEnumerable<Country?>> SearchCountry(string value)
    {
        if (string.IsNullOrEmpty(value))
            return EnumHelper.GetValues<Country?>().ToList();
        return EnumHelper.GetValues<Country?>().Where(x => x.ToString().Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
    }

    private void SelectedLanguagesItemsChanged(HashSet<CandidateSpokenLanguageDto> items)
    {
        CheckedCandidateSpokenLanguages = items;
    }

    private void SelectedCountryItemsChanged(HashSet<CandidatePreferredLocation> items)
    {
        CheckedCandidatePreferredLocations = items;
    }

    private void DeleteCheckedSpokenLanguages()
    {
        foreach (var checkedCandidateSpokenLanguage in CheckedCandidateSpokenLanguages)
        {
            _selectedLanguages = _selectedLanguages.Where(x => x.Alpha2 != checkedCandidateSpokenLanguage.LanguageCode).ToList();
            CandidateSpokenLanguages = CandidateSpokenLanguages.Where(x => x.LanguageCode != checkedCandidateSpokenLanguage.LanguageCode).ToList();
        }

        CheckedCandidateSpokenLanguages = new HashSet<CandidateSpokenLanguageDto>();
    // StateHasChanged();
    }

    private void DeleteCheckedPreferredLocation()
    {
        foreach (var checkedCandidatePreferredLocation in CheckedCandidatePreferredLocations)
        {
            _selectedCountry = _selectedCountry.Where(x => x != checkedCandidatePreferredLocation.Country).ToList();
            CandidatePreferredLocations = CandidatePreferredLocations
                .Where(x => x.Country != checkedCandidatePreferredLocation.Country).ToList();
        }

        CheckedCandidatePreferredLocations = new HashSet<CandidatePreferredLocation>();
    }

    private void AddPreferredLocation()
    {
        CandidatePreferredLocations.Add(new CandidatePreferredLocation()
        {
            Country = Country.NotSet
        });
    }

    private Task AddToSpokenLanguage()
    {
        foreach (var selectedLanguage in _selectedLanguages)
        {
            if (CandidateSpokenLanguages.Any(x => x.LanguageCode == selectedLanguage.Alpha2))
                continue;

            CandidateSpokenLanguages.Add(new CandidateSpokenLanguageDto()
            {
                LanguageName = selectedLanguage.Name,
                LanguageCode = selectedLanguage.Alpha2
            });
        }

        return Task.CompletedTask;
    }

    private Task AddToJobFunction()
    {
        foreach (var selectedJobFunction in _selectedJobFunctions)
        {
            if (CandidatePreferredJobFunctions.Any(x => x.JobFunctionId == selectedJobFunction.Id))
                continue;

            CandidatePreferredJobFunctions.Add(new CandidatePreferredJobFunction()
            {
                JobFunctionId = selectedJobFunction.Id,
                JobFunction = selectedJobFunction
            });
        }

        return Task.CompletedTask;
    }

    private Task AddToPreferredLocation()
    {
        foreach (var selectedCountry in _selectedCountry)
        {
            if (CandidatePreferredLocations.Any(x => x.Country == selectedCountry))
                continue;

            CandidatePreferredLocations.Add(new CandidatePreferredLocation()
            {
                Country = (Country)selectedCountry!,
                City = null
            });
        }

        return Task.CompletedTask;
    }

    private void PrcdBtnClick(CandidatePreferredLocation item)
    {
        CheckedCandidatePreferredLocations = CheckedCandidatePreferredLocations
            .Where(u =>
                u.Country != item.Country && u.City != item.City).ToHashSet();
    }

}